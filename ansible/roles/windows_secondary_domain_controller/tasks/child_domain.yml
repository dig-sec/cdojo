---
- name: Create A record for child domain in parent domain
  community.windows.win_dns_record:
    name: "{{ windows_domain_controller_hostname }}.{{ item.split('.')[0] }}"
    type: "A"
    values:
      - "{{ windows_domain_controller_private_ip }}"
    zone: "{{ primary_domain }}"
  loop: "{{ [secondary_domain, primary_domain] }}"
  when: primary_domain_name == item.split('.')[1]

- name: Set DNS client configuration to the primary domain DNS server
  win_dns_client:
    adapter_names: "{{ domain_adapter }}"
    ipv4_addresses:
      - "{{ primary_domain_dns_server_ip }}"
    log_path: C:\dns_log.txt

- name: Install Windows feature - AD Domain Services
  win_feature:
    name: AD-Domain-Services
    state: present
    include_management_tools: yes
  register: features

- name: Install Windows feature - RSAT-ADDS
  win_feature:
    name: RSAT-ADDS
    state: present
    include_management_tools: yes
  register: features

- name: Add child domain to parent domain
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String] $Password,
          [String] $DomainAdmin,
          [String] $ParentDomainName,
          [String] $NewDomainNetbiosName,
          [String] $ReplicationSourceDC,
          [String] $NewDomainName,
          [String] $DomSafePassword
      )
      try {
          $child_domain = Get-ADDomain -Identity $NewDomainName
          $domainExist = $true
      } catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException] {
          $domainExist = $false
      }
      if (-not $domainExist) {
          $Ansible.Changed = $true
          $pass = ConvertTo-SecureString $Password -AsPlainText -Force
          $Cred = New-Object System.Management.Automation.PSCredential ($DomainAdmin, $pass)
          $safePassword = ConvertTo-SecureString $DomSafePassword -AsPlainText -Force
          Install-ADDSDomain -Credential $Cred -SkipPreChecks -NewDomainName $NewDomainName -NewDomainNetbiosName $NewDomainNetbiosName -ParentDomainName $ParentDomainName -ReplicationSourceDC $ReplicationSourceDC -DatabasePath "C:\Windows\NTDS" -SYSVOLPath "C:\Windows\SYSVOL" -LogPath "C:\Windows\Logs" -SafeModeAdministratorPassword $safePassword -Force -NoRebootOnCompletion
      } else {
          $Ansible.Changed = $false
      }
    parameters:
      Password: "{{ domain_administrator_password }}"
      DomSafePassword: "{{ adcs_cert_authority_password }}"
      DomainAdmin: "{{ domain_administrator }}@{{ primary_domain }}"
      ParentDomainName: "{{ primary_domain }}"
      ReplicationSourceDC: "{{ windows_domain_controller_hostname }}"
      NewDomainNetbiosName: "{{ secondary_domain_name }}"
      NewDomainName: "{{ secondary_domain }}"
  register: child_result

- name: Reboot if child domain was added
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100
  when: child_result.changed

- name: Enable the {{ domain_adapter }} interface (local) for DNS client requests
  ansible.windows.win_shell: dnscmd . /resetlistenaddresses {{ windows_domain_controller_hostname }}
  when: two_adapters == "yes"

- name: Install ActiveDirectoryDSC PowerShell module
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present

- name: Enable the Active Directory Web Services if not enabled
  ansible.windows.win_shell: Set-Service -Name adws -StartupType Automatic

- name: Prioritize the {{ domain_adapter }} interface (local) as the default for routing
  ansible.windows.win_shell:
    Set-NetIPInterface -InterfaceAlias "{{ domain_adapter }}" -InterfaceMetric 10
  when: two_adapters == "yes"

- name: Set DNS client configuration to {{ windows_domain_controller_private_ip }}
  win_dns_client:
    adapter_names: "{{ domain_adapter }}"
    ipv4_addresses:
      - "{{ windows_domain_controller_private_ip }}"
    log_path: C:\dns_log.txt

- name: Verify File Server Role is installed
  win_feature:
    name: File-Services, FS-FileServer
    state: present
    include_management_tools: True

- name: Add member server to domain
  win_domain_membership:
    dns_domain_name: "{{ secondary_domain }}"
    domain_admin_user: "{{ domain_administrator }}@{{ secondary_domain }}"
    domain_admin_password: "{{ domain_administrator_password }}"
    state: domain
  register: domain_state

- name: Reboot if needed
  win_reboot:
    reboot_timeout: 1500
    post_reboot_delay: 100
  when: domain_state.reboot_required
