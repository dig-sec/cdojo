---
- name: Install dependencies for Elasticsearch
  apt:
    name: 
      - apt-transport-https
      - gnupg
    state: present
  become: yes

- name: Add Elasticsearch GPG key
  apt_key:
    url: "https://artifacts.elastic.co/GPG-KEY-elasticsearch"
    state: present
  become: yes

- name: Add Elasticsearch repository
  apt_repository:
    repo: "deb https://artifacts.elastic.co/packages/{{ es_version }}/apt stable main"
    state: present
    update_cache: yes
  become: yes

- name: Install Elasticsearch
  apt:
    name: "elasticsearch={{ elastic_stack_version }}"
    state: present
    update_cache: yes
    allow_downgrade: yes
  become: yes

- name: Configure Elasticsearch
  template:
    src: elasticsearch.yml.j2
    dest: /etc/elasticsearch/elasticsearch.yml
  become: yes
  notify: Restart Elasticsearch

- name: Ensure Elasticsearch directories have correct permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: elasticsearch
    group: elasticsearch
    mode: '0750'
  loop:
    - /etc/elasticsearch
    - /var/lib/elasticsearch
    - /var/log/elasticsearch
  become: yes

- name: Ensure Elasticsearch is started and enabled
  systemd:
    name: elasticsearch
    enabled: yes
    state: started
  become: yes

- name: Reset password for elastic user
  shell: "/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic -b -s"
  register: reset_elastic_password
  become: yes

- name: Store new elastic password
  set_fact:
    elastic_password: "{{ reset_elastic_password.stdout_lines[-1] }}"
  become: yes

- name: Reset password for kibana_system user
  shell: "/usr/share/elasticsearch/bin/elasticsearch-reset-password -u kibana_system -b -s"
  register: reset_kibana_system_password
  become: yes

- name: Store new kibana_system password
  set_fact:
    kibana_system_password: "{{ reset_kibana_system_password.stdout_lines[-1] }}"
  become: yes

- name: Generate and Retrieve Kibana Enrollment Token
  shell: |
    /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
  register: enrollment_token_output
  become: yes
  
- name: Extract Enrollment Token
  set_fact:
    enrollment_token: "{{ enrollment_token_output.stdout }}" 

- name: Output new passwords
  debug:
    msg: "Elastic password: {{ elastic_password }}, Kibana_system password: {{ kibana_system_password }}, Enrollment Token: {{ enrollment_token }}"

- name: Install Kibana
  become: yes
  apt:
    name: kibana
    state: present
    update_cache: yes

- name: Copy SSL certificate to Kibana
  copy:
    src: /etc/elasticsearch/certs/http_ca.crt
    dest: /etc/kibana/elastic_http_ca.crt
    owner: kibana
    group: kibana
    mode: '0600'
    remote_src: yes
  become: yes

- name: Configure Kibana
  template:
    src: kibana.yml.j2
    dest: /etc/kibana/kibana.yml
  become: yes
  vars:
    kibana_system_password: "{{ kibana_system_password }}" 
  notify: Restart Kibana

- name: Ensure Kibana directories have correct permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: kibana
    group: kibana
    mode: '0750'
  loop:
    - /etc/kibana
    - /var/lib/kibana
    - /var/log/kibana
  become: yes

- name: Ensure Kibana service is started and enabled
  become: yes
  systemd:
    name: kibana
    enabled: yes
    state: started

- name: Install Logstash
  apt:
    name: "logstash"
    state: present
    update_cache: yes
  become: yes

- name: Copy SSL certificate to Logstash
  copy:
    src: /etc/elasticsearch/certs/transport.p12
    dest: /etc/logstash/elastic-certificates.p12
    owner: logstash
    group: logstash
    mode: '0600'
    remote_src: yes
  become: yes

- name: Create Logstash pipeline configuration
  template:
    src: logstash_pipeline.conf.j2
    dest: /etc/logstash/conf.d/logstash_pipeline.conf
  become: yes
  vars:
    elastic_password: "{{ elastic_password }}"
  notify: Restart Logstash

- name: Ensure Logstash directories have correct permissions
  file:
    path: "{{ item }}"
    state: directory
    owner: logstash
    group: logstash
    mode: '0750'
  loop:
    - /etc/logstash
    - /var/lib/logstash
    - /var/log/logstash
  become: yes

- name: Ensure Logstash service is started and enabled
  systemd:
    name: logstash
    enabled: yes
    state: started
  become: yes

- name: Ensure Logstash is restarted if configuration changed
  meta: flush_handlers

- name: Store passwords and tokens in a file
  template:
    src: passwords.yml.j2
    dest: ./elk_passwords.yml
  become: yes
  vars:
    elastic_password: "{{ elastic_password }}"
    kibana_system_password: "{{ kibana_system_password }}"
    enrollment_token: "{{ enrollment_token }}"
  delegate_to: localhost

- name: Download Elastic Agent
  get_url:
    url: "{{ elastic_agent_download_url }}"
    dest: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"

- name: Create Installation Directory
  file:
    path: "{{ elastic_agent_install_dir }}"
    state: directory
    mode: '0755'
  become: yes

- name: Extract Elastic Agent
  unarchive:
    src: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"
    dest: "{{ elastic_agent_install_dir }}"
    remote_src: yes
  become: yes

- name: Setup Fleet in Kibana
  uri:
    url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/setup"
    method: POST
    body_format: json
    body: '{"forceRecreate": false}'
    headers:
      kbn-xsrf: "true"
    status_code: [200, 400]  # 400 if already set up
  register: fleet_setup
  until: fleet_setup.status in [200, 400]
  retries: 10
  delay: 10

- name: Ensure Fleet is set up in Kibana
  uri:
    url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/setup"
    method: POST
    body_format: json
    body: '{"forceRecreate":false}'
    headers:
      kbn-xsrf: "true"
    status_code: [200, 400]
  register: fleet_setup
  until: fleet_setup.status in [200, 400]
  retries: 10
  delay: 10

- name: Create Fleet Policy
  uri:
    url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/agent_policies"
    method: POST
    body_format: json
    body: "{{ policy_settings | combine({'name': fleet_policy_name, 'description': fleet_policy_description, 'namespace': 'default'}) }}"
    headers:
      kbn-xsrf: "fleet"
    validate_certs: no
  register: policy_response
  when: policy_response is not defined or policy_response.status != 200
  changed_when: true

- name: Set Policy ID (if policy was created)
  set_fact:
    policy_id: "{{ policy_response.json.item.id }}"
  when: policy_response.status == 200  

- name: Set Policy ID
  set_fact:
    policy_id: "{{ policy_response.json.item.id }}"
  when: policy_response is defined and policy_response.status == 200

- name: Enroll Agent with Policy
  shell: |
    {{ elastic_agent_install_dir }}/elastic-agent install --url=https://{{ kibana_host }}:{{ kibana_port }} \
    --enrollment-token={{ enrollment_token }} --policy-id={{ policy_id }}
  when: policy_id is defined 

- name: Cleanup installation tarball
  file:
    path: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"
    state: absent
  become: yes

- name: Start Elastic Agent Service
  service:
    name: elastic-agent
    state: started
    enabled: yes 
  become: yes

- name: Remove Elastic Agent download
  file:
    path: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"
    state: absent
  become: yes