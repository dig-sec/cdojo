---
- name: Create or Update Agent Policy
  uri:
    url: "http://{{ kibana_host }}:{{ kibana_port }}/agent_policies?sys_monitoring=true"
    method: POST
    headers:
      kbn-xsrf: "1"  # Required for Kibana API
      Content-Type: "application/json"
    body_format: json
    body: |
      {
        "name": "{{ agent_policy_name }}",
        "description": "",
        "namespace": "default",
        "monitoring_enabled": ["logs", "metrics"],
        "inactivity_timeout": 1209600,
        "is_protected": false
      }
    validate_certs: no
  register: agent_policy_response

- name: Extract Agent Policy ID
  set_fact:
    agent_policy_id: "{{ agent_policy_response.json.item.id }}"
  when: agent_policy_response.status == 200
  

# - name: Create or Update Package Policy
#   uri:
#     url: "{{ kibana_api_base_url }}/package_policies"
#     method: POST
#     headers:
#       kbn-xsrf: "1"
#       Content-Type: "application/json"
#     body_format: json
#     body:
#       policy_id: "{{ agent_policy_id }}"
#       package:
#         name: "fleet_server"
#         version: "{{ fleet_server_package_version }}"
#       name: "{{ package_policy_name }}"
#       description: ""
#       namespace: ""  
#       inputs:
#         fleet_server-fleet-server:
#           enabled: true
#           vars:
#             custom: ""
#           streams: {}
#   when: agent_policy_id is defined 


# - name: Create Fleet Policy
#   uri:
#     url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/agent_policies"
#     method: POST
#     body_format: json
#     body: "{{ policy_settings | combine({'name': fleet_policy_name, 'description': fleet_policy_description, 'namespace': 'default'}) }}"
#     headers:
#       kbn-xsrf: "true"
#     validate_certs: no
#   become: true
#   register: policy_response
#   until: policy_response.status == 200
#   retries: 5
#   delay: 10

# - name: Set Policy ID
#   set_fact:
#     policy_id: "{{ policy_response.json.item.id }}"

# - name: Create Fleet Package Policy
#   uri:
#     url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/package_policies"
#     method: POST
#     body_format: json
#     body: |
#       {
#         "package": {
#           "name": "fleet_server",
#           "version": "1.5.0"
#         },
#         "name": "fleet_server-1",
#         "namespace": "default",
#         "description": "",
#         "policy_id": "{{ policy_id }}",
#         "vars": {},
#         "inputs": {
#           "fleet_server-fleet-server": {
#             "enabled": true,
#             "vars": {
#               "custom": ""
#             },
#             "streams": {}
#           }
#         }
#       }
#     headers:
#       kbn-xsrf: "true"
#     validate_certs: no
#   become: true
#   until: policy_response.status == 200


# - name: Download Elastic Agent
#   get_url:
#     url: "{{ elastic_agent_download_url }}"
#     dest: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"

# - name: Create Installation Directory
#   file:
#     path: "{{ elastic_agent_install_dir }}"
#     state: directory
#     mode: '0755'
#   become: true

# - name: Extract Elastic Agent
#   unarchive:
#     src: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"
#     dest: "{{ elastic_agent_install_dir }}"
#     remote_src: yes
#   become: true

# - name: Setup Fleet in Kibana
#   uri:
#     url: "http://{{ kibana_host }}:{{ kibana_port }}"
#     method: POST
#     body_format: json
#     body: '{"forceRecreate": false}'
#     headers:
#       kbn-xsrf: "true"
#       Authorization: "Basic {{ (elastic_username + ':' + elastic_password) | b64encode }}"
#     status_code: [200, 400]
#   become: true
#   register: fleet_setup
#   until: fleet_setup.status in [200, 400]

# - name: Create Fleet Policy
#   uri:
#     url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/agent_policies"
#     method: POST
#     body_format: json
#     body: "{{ policy_settings | combine({'name': fleet_policy_name, 'description': fleet_policy_description, 'namespace': 'default'}) }}"
#     headers:
#       kbn-xsrf: "true"
#     validate_certs: no
#   become: true
#   register: policy_response
#   until: policy_response.status == 200
#   retries: 5
#   delay: 10

# - name: Create Fleet Package Policy
#   uri:
#     url: "http://{{ kibana_host }}:{{ kibana_port }}/api/fleet/package_policies"
#     method: PUT
#     body_format: json
#     body: |
#       {
#         "package": {
#           "name": "fleet_server",
#           "version": "1.5.0"
#         },
#         "name": "fleet_server-1",
#         "namespace": "",
#         "description": "",
#         "policy_id": "{{ policy_response.json.item.id }}",
#         "vars": {},
#         "inputs": {
#           "fleet_server-fleet-server": {
#             "enabled": true,
#             "vars": {
#               "custom": ""
#             },
#             "streams": {}
#           }
#         }
#       }
#     headers:
#       kbn-xsrf: "true"
#     validate_certs: no
#   become: true
#   until: policy_response.status == 200
#   retries: 5
#   delay: 10

# - name: Set Policy ID
#   set_fact:
#     policy_id: "{{ policy_response.json.item.id }}"

# - name: Enroll Fleet Server (Consider replacing with elastic_agent module if available)
#   block:
#     - shell: |
#         {{ elastic_agent_install_dir }}/elastic-agent enroll --url=https://{{ kibana_host }}:{{ kibana_port }} \
#         --enrollment-token={{ enrollment_token }} --server
#       become: true
#       become_user: kibana

# - name: Cleanup installation tarball
#   file:
#     path: "/tmp/elastic-agent-{{ elastic_agent_version }}-linux-x86_64.tar.gz"
#     state: absent
#   become: true

# - name: Start Elastic Agent Service
#   service:
#     name: elastic-agent
#     state: started
#     enabled: yes
#   become: true