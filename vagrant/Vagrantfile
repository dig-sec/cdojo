require 'yaml'

inventory = YAML.load_file('inventory.yml')
vars = inventory['all']['vars']

Vagrant.configure("2") do |config|
  inventory['all']['hosts'].each do |host, details|
    config.vm.define host do |config|
      host_portion = details['ip'].split(/\./)[3].to_i
      config.vm.box = details['vagrant_box']
      config.vm.box_version = details['box_version'] if details.key?('box_version')
      config.vm.box_check_update = false 
      config.vm.hostname = host

      if details['box_type'] == 'linux'
        ansible_port = vars['vagrant_ports']['ssh']['host'] + host_portion
      else 
        ansible_port = vars['vagrant_ports']['winrm_http']['host'] + host_portion
        config.vm.guest = :windows 
        config.vm.communicator = "winrm"
        config.vm.boot_timeout = 600 
        config.winrm.timeout = 600 
        config.winrm.basic_auth_only = true 
        config.winrm.retry_limit = 20 
      end

      config.vm.network :private_network, ip: details['ip']
      vars['vagrant_ports'].each do |protocol, details|
        config.vm.network :forwarded_port, guest: details['guest'], host: details['host'] + host_portion
      end

      config.vm.synced_folder '.', '/vagrant', disabled: true

      config.vm.provision "ansible" do |ansible|
        ansible.extra_vars = {
          ansible_port: ansible_port,
          ansible_winrm_scheme: vars['ansible_winrm_scheme'],
          ansible_winrm_server_cert_validation: vars['ansible_winrm_server_cert_validation'],
          windows_domain_controller_private_ip: inventory['all']['hosts']['dc01']['ip'],
          win_timezone: vars['win_timezone'],
          root_domain: vars['root_domain'],
          #domain_name: vars['domain_name'],
          win_domain_admin: vars['win_domain_admin'],
          win_password: vars['win_domain_admin_pass'],
          hostname: config.vm.hostname,
          ansible_winrm_operation_timeout_sec: 120,
          ansible_winrm_read_timeout_sec: 150,
          adcs_host: vars['adcs_host'],
          adcs_common_name: vars['adcs_common_name'],
        }
        ansible.playbook = "../ansible/hosts/#{host}.yml"
        ansible.config_file = "../ansible/ansible.cfg"
        ansible.compatibility_mode = "2.0"
      end
       # Libvirt/KVM provider configuration:
      config.vm.provider :libvirt do |libvirt|
        libvirt.driver = "kvm"  # Explicitly set the driver to KVM

        # Memory and CPU settings
        libvirt.memory = details.key?('memory') ? details['memory'] : vars['default_host']['memory']
        libvirt.cpus = details.key?('cpus') ? details['cpus'] : vars['default_host']['cpus']

        # Set the name for the VM in libvirt
        #libvirt.domain_name = 'cr_' + host

        # Optional settings for better performance or specific needs
        libvirt.video_vram = 32  # Adjust if needed for your VMs
        libvirt.qemu_use_session = false  # Disable if you have issues
        libvirt.graphics_type = 'none'   # For headless VMs
        libvirt.disk_bus = 'virtio'  # For faster disk access
        libvirt.nic_model_type = 'virtio'  # For faster networking

        # If using a bridged network:
        # libvirt.network_name = 'your_bridge_name'  # Replace with your network name
      end
    end
  end
end
